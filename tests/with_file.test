package require tcltest
namespace import ::tcltest::*
::tcltest::loadTestedCommands
package require chantricks

test with_file-1.1 {code transparency: return} -setup { #<<<
	close [file tempfile tmp]
	proc t-1.1 fn {
		chantricks with_file h $fn {
			set ::g_h $h
			return inside	;# should return from t-1.1
		}
		return outside
	}
} -body {
	list [t-1.1 $tmp] [expr {$g_h in [chan names]}]
} -cleanup {
	file delete $tmp
	unset -nocomplain g_h tmp
	rename t-1.1 {}
} -result {inside 0}
#>>>
test with_file-2.1 {code transparency: continue} -body { #<<<
	close [file tempfile tmp]
	set g_h		{}
	set res		{}
	for {set i 0} {$i < 10} {incr i} {
		lappend res	[chantricks with_file h $tmp {
			lappend g_h $h
			if {$i % 2} continue
			set i
		}]
	}
	list $res [lmap h $g_h {expr {$h in [chan names]}}]
} -cleanup {
	file delete $tmp
	unset -nocomplain g_h res h i tmp
} -result {{0 2 4 6 8} {0 0 0 0 0 0 0 0 0 0}}
#>>>
test with_file-3.1 {code transparency: break} -body { #<<<
	close [file tempfile tmp]
	set g_h		{}
	set res		{}
	for {set i 0} {$i < 10} {incr i} {
		lappend res	[chantricks with_file h $tmp {
			if {$i >= 5} break
			lappend g_h $h
			set i
		}]
	}
	list $res [lmap h $g_h {expr {$h in [chan names]}}]
} -cleanup {
	file delete $tmp
	unset -nocomplain g_h res h i tmp
} -result {{0 1 2 3 4} {0 0 0 0 0}}
#>>>
test with_file-4.1 {code transparency: error} -body { #<<<
	close [file tempfile tmp]
	set g_h		{}
	set res		{}
	list [catch {
		for {set i 0} {$i < 10} {incr i} {
			lappend res	[chantricks with_file h $tmp {
				if {$i >= 5} {error bang!}
				lappend g_h $h
				set i
			}]
		}
	} r o] $res $r [dict get $o -code] [lmap h $g_h {expr {$h in [chan names]}}]
} -cleanup {
	file delete $tmp
	unset -nocomplain g_h res h i r o tmp
} -result {1 {0 1 2 3 4} bang! 1 {0 0 0 0 0}}
#>>>
test with_file-5.1 {code transparency: exception with errorcode} -body { #<<<
	close [file tempfile tmp]
	set g_h		{}
	set res		{}
	list [catch {
		for {set i 0} {$i < 10} {incr i} {
			lappend res	[chantricks with_file h $tmp {
				if {$i >= 5} {throw {t-5.1 foo} bang!}
				lappend g_h $h
				set i
			}]
		}
	} r o] $res $r [dict get $o -code] [dict get $o -errorcode] [lmap h $g_h {expr {$h in [chan names]}}]
} -cleanup {
	file delete $tmp
	unset -nocomplain g_h res h i r o tmp
} -result {1 {0 1 2 3 4} bang! 1 {t-5.1 foo} {0 0 0 0 0}}
#>>>
test with_file-6.1 {code transparency: ok} -body { #<<<
	close [file tempfile tmp]
	set g_h		{}
	set res		{}
	list [catch {
		for {set i 0} {$i < 10} {incr i} {
			lappend res	[chantricks with_file h $tmp {
				lappend g_h $h
				set i
			}]
		}
	} r o] $res [dict get $o -code] [lmap h $g_h {expr {$h in [chan names]}}]
} -cleanup {
	file delete $tmp
	unset -nocomplain g_h res h i r o tmp
} -result {0 {0 1 2 3 4 5 6 7 8 9} 0 {0 0 0 0 0 0 0 0 0 0}}
#>>>
test with_file-7.1 {code transparency: undefined int} -body { #<<<
	close [file tempfile tmp]
	set g_h		{}
	set res		{}
	list [catch {
		for {set i 0} {$i < 10} {incr i} {
			lappend res	[chantricks with_file h $tmp {
				if {$i >= 5} {return -level 0 -code 42 "thanks for the fish"}
				lappend g_h $h
				set i
			}]
		}
	} r o] $r $res [dict get $o -code] [lmap h $g_h {expr {$h in [chan names]}}]
} -cleanup {
	file delete $tmp
	unset -nocomplain g_h res h i r o tmp
} -result {42 {thanks for the fish} {0 1 2 3 4} 42 {0 0 0 0 0}}
#>>>

coroutine coro eval {
	try {
		test with_file-8.1 {code transparency: yield} -body { #<<<
			close [file tempfile tmp]
			set g_h		{}
			set res		{}
			list [catch {
				for {set i 0} {$i < 10} {incr i} {
					lappend res	[chantricks with_file h $tmp {
						lappend g_h $h
						after 1 [list [info coroutine] y$i]
						yield
					}]
				}
			} r o] $res [dict get $o -code] [lmap h $g_h {expr {$h in [chan names]}}]
		} -cleanup {
			file delete $tmp
			unset -nocomplain g_h res h i r o tmp
		} -result {0 {y0 y1 y2 y3 y4 y5 y6 y7 y8 y9} 0 {0 0 0 0 0 0 0 0 0 0}}
		#>>>
	} finally {
		set coro_done	1
	}
}

if {![info exists coro_done]} {
	vwait coro_done
}
unset -nocomplain coro_done

::tcltest::cleanupTests
return
# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
